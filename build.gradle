// See https://github.com/JetBrains/gradle-intellij-plugin/
plugins {
    id("org.jetbrains.intellij.platform") version "2.2.1"
    id 'java'
    id 'com.diffplug.spotless' version '7.0.2'
}

group 'edu.kit.kastel.sdq'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = "21"
    targetCompatibility = "21"
}

repositories {
    mavenLocal()
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    intellijPlatform {
        intellijIdeaCommunity('2024.2.1')
        pluginVerifier()
        bundledPlugin("com.intellij.java")
        bundledPlugin("org.jetbrains.idea.maven")
        instrumentationTools()
        def localJbr = System.getenv("LOCAL_JBR")
        if (localJbr != null) {
            jetbrainsRuntimeLocal(localJbr)
        }
    }
    implementation 'edu.kit.kastel.sdq:artemis4j:7.7.5-SNAPSHOT'
    // Tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + JUNIT_VERSION
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + JUNIT_VERSION
    testImplementation 'com.tngtech.archunit:archunit:' + ARCHUNIT_VERSION
    testImplementation 'com.tngtech.archunit:archunit-junit5:' + ARCHUNIT_VERSION
}

intellijPlatform {
    pluginConfiguration {
        name = "IntelliGrade"
    }
}
patchPluginXml {
    changeNotes = """"""
}
test {
    useJUnitPlatform()
}

tasks {
    runIde {
        autoReload = true
    }

    buildSearchableOptions {
        enabled = false
    }
}

spotless {
    ratchetFrom 'origin/main'

    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore', '*.md'
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        toggleOffOn("@formatter:off", "@formatter:on")
        palantirJavaFormat("2.50.0").formatJavadoc(false)
        licenseHeaderFile('header.txt')
        importOrderFile('spotless.importorder')
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
